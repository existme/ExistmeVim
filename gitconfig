# set your user tokens as environment variables, such as ~/.secrets
# See the README for examples.
[color]
	ui = true
	interactive = always
	pager = true
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
	whitespace = red reverse
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
	header = normal blink
	updated = green reverse
	nobranch = red white bold
[alias]

  # add
  a = add                           # add
  chunkyadd = add --patch           # stage commits chunk by chunk

  # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot

  #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
  recent-branches = !git for-each-ref --count=5 --sort=-committerdate refs/heads/ --format='%(refname:short)'

  # branch
  b = branch -v                     # branch (verbose)

  # commit
  c = commit -m                     # commit with message
  ca = commit -am                   # commit all with message
  ci = commit                       # commit
  cl = commit -eF commit.log			# commit with message from file commit.log
  ammend = commit --amend           # ammend your last commit
  amend = commit --amend            # ammend your last commit
  amendf = !git add --all && git commit --amend --no-edit # Use previous message
  # checkout
  co = checkout                     # checkout
  nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

  # cherry-pick
  cp = cherry-pick -x               # grab a change from a branch

  # diff
	last	= diff HEAD^						 # diff last committed change
	d		= difftool
	dl		= difftool HEAD
	dll	= difftool HEAD~1
	dc		= difftool --cached            # diff staged changes
	vd		= difftool -t vimdiff
	vdl	= difftool -t vimdiff HEAD 
	vdll	= difftool -t vimdiff HEAD~1 
	vdc	= difftool --cached -t vimdiff # diff staged changes
	fd		= difftool -t opendiff
	fdl	= difftool -t opendiff HEAD 
	fdll	= difftool -t opendiff HEAD~1 
	fdc	= difftool --cached -t opendiff # diff staged changes


  # log
  l = log --graph --date=short
  changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
  short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  simple = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

  #List commits in short form, with colors and branch/tag annotation
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
  # List commits showing changed files
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
  ll2 = log --stat --abbrev-commit --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]"
  # List oneline commits showing dates
  lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
  # List oneline commits showing relative dates
  ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative

  authors = shortlog -sn 

  # Show all your aliases
  la = "!git config -l | grep alias | cut -c 7-"

  # pull
  pl = pull                         # pull

  # push
  ps = push                         # push

  # rebase
  rc = rebase --continue            # continue rebase
  rs = rebase --skip                # skip rebase

  # remote
  r = remote -v                     # show remotes (verbose)

  # reset
  unstage = reset HEAD              # remove files from index (tracking)
  uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
  r = reset
  r1 = reset HEAD^
  r2 = reset HEAD^^
  rh = reset --hard
  rh1 = reset HEAD^ --hard
  rh2 = reset HEAD^^ --hard

  filelog = log -u                  # show changes to a file
  fl = log -u
  mt = mergetool                    # fire up the merge tool

  # stash
  ss = stash                        # stash changes
  sl = stash list                   # list stashes
  sa = stash apply                  # apply stash (restore changes)
  sd = stash drop                   # drop stashes (destory changes)

  # status
  s = status                        # status
  st = status                       # status
  stat = status                     # status

  # tag
  t = tag -n                        # show tags with <n> lines of each tag message

  # helpers
  br = branch
  lol = log --pretty=oneline --abbrev-commit --graph --decorate

	#add
	a	= !git add . && git add -u && git status
	au = !git add -u && git status
	aa = !git add . && git add -u && git status
	dchanges = difftool develop
[format]
  pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
[mergetool]
  prompt = false
	keepBackup = false
[mergetool "mvimdiff"]
  cmd="mvim -c 'Gdiff' $MERGED"     # use fugitive.vim for 3-way merge
  keepbackup=false
[merge]
  summary = true
  verbosity = 1
	tool = diffmerge
[apply]
  whitespace = nowarn
[branch]
  autosetupmerge = true
	autosetuprebase = always
[push]
  # 'git push' will push the current branch to its tracking branch
  # the usual default is to push all branches
  default = tracking
[core]
	autocrlf = input
  editor = vim
	excludesfile = /Users/rezasa/.gitignore_global
	whitespace=fix,-ident-with-non-tab,trailing-space,cr-at-eol
	pager = less -JFRSXr
[advice]
  statusHints = false
[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true
	algorithm = patience
	tool = vimdiff
	external = vimdiff									# for others
	external = /Users/rezasa/bin/git-diff-cmd.sh # for mac
	merge = vimdiff
[rerere]
  # Remember my merges
  # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
  enabled = true
[include]
  path = .gitconfig.user
[github]
	user = existme
[credential]
	helper = cache
[user]
	name = Reza Shams
	email = rezasa@axis.com
[difftool]
	prompt = false
[mergetool "diffmerge"]
	cmd = "diffmerge --merge --result=\"$MERGED\" \"$LOCAL\" \"$(if test -f \"$BASE\"; then echo \"$BASE\"; else echo \"$LOCAL\"; fi)\" \"$REMOTE\""
	trustExitCode = true
[difftool "diffmerge"]
	cmd = diffmerge \"$LOCAL\" \"$REMOTE\"
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
