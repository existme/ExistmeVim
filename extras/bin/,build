#!/bin/zsh
# !! It's important to use bash or zsh otherwise reads doesn't work
#
declare selected=$(cat <<EOF
i3
i3-gaps
sway
surf
tabbed
vim
rofi
albert
xkb-switch
compton
dunst
i3lock-color
cmus
check
sshuttle
tig
xrectsel
bumblebee-status
quit
EOF
)
function gitPull(){
    local prj=$1
    echo "Compiling ${bY}$prj${cZ}"
    echo "Do you want to pull$bR $prj$cZ located at$cG $HOME/git/$prj$cZ?"
    read -k 1 -r "pr?Ok to pull (${cY}y${cZ}/${bW}N${cZ})?"
    echo
    cd ~/git/$prj

    if [[ $pr =~ ^[Yy]$ ]]; then
        git pull
        git submodule foreach git pull
    else
        echo "${bR}Nothing pulled${cZ}!"
    fi
}
function clone(){
    local prj=$1
    local prjPath="$HOME/git/$1"
    local repo=$2
    if [[ ! -d "$prjPath" ]]; then
      echo "Cloning ${bW}$repo${cZ} to ${bY}$prjPath${cZ}"
      git clone $repo $prjPath --recursive 
    fi
}
function okToBuild(){
    read -k 1 -r "pr?Ok to build (${cY}y${cZ}/${bW}N${cZ})?"
    echo
    if [[ ! $pr =~ ^[Yy]$ ]]; then
        echo "${bR}Build Cancled${cZ}!"
        return 1
    fi
    # echo "${bG}Building${cZ} ..."
    toilet "Building..." -f future
    return 0
}
if [ -z "$1" ]; then
   declare res=$(
       echo $selected|tr '\n' '|'|
       rofi -dmenu -sep '|' -p "What project do you want to build? " -i -disable-history -levenshtein-sort -matching normal -e
       )
else
   res=$1
fi

case "$res" in
    i3)
        prj=i3
        gitPull $prj
        if okToBuild; then
            autoreconf -fi
            rm -rf ~/git/$prj/build
            mkdir ~/git/$prj/build
            cd ~/git/$prj/build
            grc ../configure --prefix=/usr --sysconfdir=/etc --disable-sanitizers
            grc make -j8
            grc sudo make install
        fi
    ;;
    sway)
       prj=sway
       clone $prj https://github.com/swaywm/sway.git
       gitPull $prj

       if okToBuild; then
          sudo apt-get install meson
          meson build
          ninja -C build
          sudo ninja -C build install
          sudo chmod a+s /usr/local/bin/sway
       fi
    ;;
    surf)
      prj=surf
      clone $prj https://git.suckless.org/surf
      gitPull $prj

      if okToBuild; then
         sudo apt-get install build-essential libgtk-3-dev
         sudo apt install libgcr-3-dev
         sudo make install
      fi
    ;;
    tabbed)
      prj=tabbed
      clone $prj https://git.suckless.org/tabbed
      gitPull $prj

      if okToBuild; then
         # sudo apt install build-essential libgtk-3-dev
         sudo make install
      fi
    ;;
    i3-gaps)
        prj=i3-gaps
        gitPull $prj
    ;;
    vim)
        prj=vim
        clone $prj https://github.com/vim/vim.git
        gitPull $prj

        if okToBuild; then
            sudo apt-get -qy remove --purge vim vim-runtime vim-gnome vim-tiny vim-common vim-gui-common
            sudo apt-get -qy build-dep vim-gnome
            sudo apt-get install -qy build-essential liblua5.3-0 liblua5.3-dev python-dev ruby-dev libperl-dev libncurses5-dev libgnome2-dev libgnomeui-dev libgtk2.0-dev libatk1.0-dev libbonoboui2-dev libcairo2-dev libx11-dev libxpm-dev libxt-dev
            sudo rm -rf /usr/local/share/vim /usr/bin/vim /usr/local/bin/vim
            sudo mkdir /usr/include/lua5.3/{include,lib}
            sudo cp /usr/include/lua5.3/*.h /usr/include/lua5.3/include/
            sudo ln -sf /usr/lib/x86_64-linux-gnu/liblua5.3.so /usr/include/lua5.3/lib/liblua.so
            sudo ln -sf /usr/lib/x86_64-linux-gnu/liblua5.3.a /usr/include/lua5.3/lib/liblua.a
            sudo make distclean
            ./configure --with-features=huge \
               --enable-rubyinterp \
               --enable-largefile \
               --disable-netbeans \
               --enable-python3interp \
               --with-python-config-dir=$(python3-config --configdir) \
               --enable-perlinterp \
               --enable-luainterp \
               --enable-gui=auto \
               --enable-fail-if-missing \
               --with-lua-prefix=/usr/include/lua5.3 \
               --enable-cscope \
               --enable-multibyte
            sudo make
            sudo make install
            # sudo apt install checkinstall
            # sudo checkinstall
        fi
    ;;
    rofi)
        prj=rofi
        clone $prj https://github.com/DaveDavenport/rofi.git
        gitPull $prj
        if okToBuild; then
            git submodule init
            git submodule update
            autoreconf --install
            sudo apt-get install bison flex xutils-dev libxcb-ewmh-dev
            sudo apt-get install librsvg2-dev
            sudo apt-get install textinfo
            # sudo pip install easybuild
            # Install latest version of check
            # https://github.com/libcheck/check.git
            rm -rf build
            mkdir build && cd build
            ../configure

            sudo configure
            sudo make install
        fi
    ;;
    albert)
       prj=albert
       clone $prj https://github.com/albertlauncher/albert.git
       gitPull $prj
       if okToBuild; then
         sudo apt-get install libqt5xmlpatterns5-dev qtbase5-dev libqt5x11extras5-dev libqt5svg5-dev libqt5qml5 qtdeclarative5-dev libqalculate-dev libmuparser-dev
         rm -rf albert-build
         mkdir albert-build
         cd albert-build
         cmake ../ -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Debug -DBUILD_VIRTUALBOX=OFF
         make
         sudo make install
         echo "${bY}Warning:${cZ} be sure that you have cloned the repo recursively otherwise you might ran into strange problems"
         echo "${bB}git clone https://github.com/albertlauncher/albert.git --recursive ${cZ}"
         echo "${bY}Warning-2:${cZ} if you have problems with qalculate plugin you need to compile it from source"
       fi
    ;;
    xkb-switch)
       prj=xkb-switch
       gitPull $prj

       if okToBuild; then
          sudo apt install libxkbfile-dev 
          mkdir build 
          cd build
    		 cmake ..
    		 make
    		 sudo make install
       fi
    ;;
    compton)
       prj=compton
       gitPull $prj

       if okToBuild; then
          sudo apt install libx11-dev libxcomposite-dev libxdamage-dev libxfixes-dev libxrender-dev libxrandr-dev libxinerama-dev pkg-config make x11proto-composite-dev x11-utils libpcre3-dev libconfig-dev libdrm-dev asciidoc libdbus-1-dev
    		 make 
    		 make docs
    		 sudo make install
       fi
    ;;
    dunst)
       prj=dunst
       clone $prj https://github.com/dunst-project/dunst.git
       # git clone https://github.com/PandorasFox/i3lock-color
       # https://wiki.archlinux.org/index.php/Desktop_notifications
       gitPull $prj

       if okToBuild; then
          sudo apt install libdbus-1-dev libx11-dev libxinerama-dev libxrandr-dev libxss-dev libglib2.0-dev libpango1.0-dev libgtk2.0-dev libxdg-basedir-dev
          sudo apt install libgtk-3-dev libgdk-pixbuf2.0-dev libxss-dev libxdg-basedir-dev libnotify-dev
          sudo make clean
    		 sudo make -j5
          sudo make clean-dunsitify
    		 sudo make dunstify
          cp dunstify ~/bin/
    		 sudo make clean install
          sudo make install-service
          sudo make install-service-dbus
          sudo killall dunst
          dunst -config ~/.config/dunst/dunstrc &
       fi
    ;;
    i3lock-color)
       prj=i3lock-color
       # clone $prj https://github.com/PandorasFox/i3lock-color.git
       clone $prj https://github.com/meskarune/i3lock-color.git
       gitPull $prj

       if okToBuild; then
          # sudo apt install dbus libxinerama libxrandr libxss libxdg-basedir glib pango cairo libgtk-3-dev
          sudo apt install libxcb-dpms0-dev libpam0g-dev libxcb-dpms0 libpam-dev libcairo-dev libx11-dev libx11-xcb-dev libxcb-composite0-dev libjpeg-dev
          sudo apt remove i3lock

          # export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libasan.so.3.0.0
          autoreconf -i && ./configure && make
          sudo make install
       fi
    ;;
    cmus)
       prj=cmus 
       clone $prj https://github.com/cmus/cmus.git
       gitPull $prj
       
       if okToBuild; then
          sudo apt install libncursesw5-dev libmad0-dev 
          sudo apt remove cmus

          # to list all features use:
          # ./configure --help

          ./configure && make clean && make
          sudo make install
       fi
    ;;
    check)
       prj=check
       set -e

       clone $prj https://github.com/libcheck/check
       gitPull $prj

       if okToBuild; then
          autoreconf --install
          ./configure
          make
          sudo make install
       fi
    ;;
    sshuttle)
       prj=sshuttle
       set -e

       clone $prj https://github.com/sshuttle/sshuttle
       gitPull $prj

       if okToBuild; then
          sudo apt remove sshuttle
          sudo ./setup.py install
       fi
    ;;
    tig)
       prj=tig
       set -e

       clone $prj https://github.com/jonas/tig.git
       gitPull $prj

       if okToBuild; then
          sudo apt install asciidoc
          sudo apt remove tig
          make prefix=/usr/local
          sudo make install prefix=/usr/local
          sudo make install-doc
       fi
    ;;
    xrectsel)
       prj=xrectsel
       set -e

       clone $prj https://github.com/lolilolicon/xrectsel.git
       gitPull $prj

       if okToBuild; then
          ./bootstrap
          ./configure --prefix /usr/local
          make prefix=/usr/local
          sudo make install prefix=/usr/local
       fi
    ;;
    bumblebee-status)
       prj=bumblebee-status
       set -e
       clone $prj https://github.com/tobi-wan-kenobi/bumblebee-status.git
       gitPull $prj
       sudo pip install netifaces psutil requests i3ipc dnf
       sudo apt install libx11-6 python-psutil python-requests python-netifaces
    ;;
    quit)
        echo "${bB}Canceled$cZ"
        return
    ;;
esac
# echo "${bB}Build script finished.$cZ"
toilet "Build script finished." -f future
echo "Build done" | pv -qL 10
